import MagicEmitter from "./MagicEmitter";
declare type TOrArrayOfT<T> = T | T[];
export interface List<T> {
    data: T[];
    has_more: boolean;
    next_page: string | null;
    total_cards: string | null;
    warnings: string[];
}
export interface ApiCatalog {
    data: string[];
}
export interface SearchError {
    object: "error";
    code: string;
    status: number;
    details: string;
    warnings?: string[];
}
export interface RetryStrategy {
    attempts: number;
    timeout?: number;
    canRetry?(error: SearchError): boolean;
}
export default class MagicQuerier {
    static lastQuery: number;
    static lastError: SearchError | undefined;
    static retry: RetryStrategy;
    protected query<T>(apiPath: TOrArrayOfT<string | number>, query?: {
        [key: string]: any;
    }, post?: any): Promise<T>;
    protected queryPage<T>(emitter: MagicEmitter<T>, apiPath: string, query: any, page?: number): Promise<void>;
    private tryQuery;
    private canRetry;
}
export {};
