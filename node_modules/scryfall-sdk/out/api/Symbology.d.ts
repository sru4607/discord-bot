import { Color } from "../IScry";
export interface CardSymbol {
    symbol: string;
    loose_variant: string;
    english: string;
    transposable: string;
    represents_mana: boolean;
    converted_mana_cost: number;
    colors: Color[];
    appears_in_mana_costs: boolean;
    funny: boolean;
}
export interface ManaCost {
    cost: string;
    cmc: number;
    colors: Color[];
    colorless: boolean;
    monocolored: boolean;
    multicolored: boolean;
}
declare const _default: {
    all(): Promise<CardSymbol[]>;
    parseMana(shorthand: string): Promise<ManaCost>;
    query<T>(apiPath: string | number | (string | number)[], query?: {
        [key: string]: any;
    }, post?: any): Promise<T>;
    queryPage<T>(emitter: import("../util/MagicEmitter").default<T>, apiPath: string, query: any, page?: number): Promise<void>;
    tryQuery(apiPath: string, query?: {
        [key: string]: any;
    }, post?: any): Promise<{
        result: import("axios").AxiosResponse<any>;
        lastError: import("../util/MagicQuerier").SearchError;
    }>;
    canRetry(error: import("../util/MagicQuerier").SearchError): boolean;
};
export default _default;
