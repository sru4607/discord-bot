"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const MagicEmitter_1 = require("../util/MagicEmitter");
const MagicQuerier_1 = require("../util/MagicQuerier");
var UniqueStrategy;
(function (UniqueStrategy) {
    UniqueStrategy[UniqueStrategy["cards"] = 0] = "cards";
    UniqueStrategy[UniqueStrategy["art"] = 1] = "art";
    UniqueStrategy[UniqueStrategy["prints"] = 2] = "prints";
})(UniqueStrategy || (UniqueStrategy = {}));
var Sort;
(function (Sort) {
    Sort[Sort["name"] = 0] = "name";
    Sort[Sort["set"] = 1] = "set";
    Sort[Sort["released"] = 2] = "released";
    Sort[Sort["rarity"] = 3] = "rarity";
    Sort[Sort["color"] = 4] = "color";
    Sort[Sort["usd"] = 5] = "usd";
    Sort[Sort["tix"] = 6] = "tix";
    Sort[Sort["eur"] = 7] = "eur";
    Sort[Sort["cmc"] = 8] = "cmc";
    Sort[Sort["power"] = 9] = "power";
    Sort[Sort["toughness"] = 10] = "toughness";
    Sort[Sort["edhrec"] = 11] = "edhrec";
    Sort[Sort["artist"] = 12] = "artist";
})(Sort || (Sort = {}));
var SortDirection;
(function (SortDirection) {
    SortDirection[SortDirection["auto"] = 0] = "auto";
    SortDirection[SortDirection["asc"] = 1] = "asc";
    SortDirection[SortDirection["desc"] = 2] = "desc";
})(SortDirection || (SortDirection = {}));
var Rarity;
(function (Rarity) {
    Rarity[Rarity["common"] = 0] = "common";
    Rarity[Rarity["uncommon"] = 1] = "uncommon";
    Rarity[Rarity["rare"] = 2] = "rare";
    Rarity[Rarity["mythic"] = 3] = "mythic";
})(Rarity || (Rarity = {}));
var FrameEffect;
(function (FrameEffect) {
    FrameEffect[FrameEffect["legendary"] = 0] = "legendary";
    FrameEffect[FrameEffect["miracle"] = 1] = "miracle";
    FrameEffect[FrameEffect["nyxtouched"] = 2] = "nyxtouched";
    FrameEffect[FrameEffect["draft"] = 3] = "draft";
    FrameEffect[FrameEffect["devoid"] = 4] = "devoid";
    FrameEffect[FrameEffect["tombstone"] = 5] = "tombstone";
    FrameEffect[FrameEffect["colorshifted"] = 6] = "colorshifted";
    FrameEffect[FrameEffect["sunmoondfc"] = 7] = "sunmoondfc";
    FrameEffect[FrameEffect["compasslanddfc"] = 8] = "compasslanddfc";
    FrameEffect[FrameEffect["originpwdfc"] = 9] = "originpwdfc";
    FrameEffect[FrameEffect["mooneldrazidfc"] = 10] = "mooneldrazidfc";
})(FrameEffect || (FrameEffect = {}));
var Game;
(function (Game) {
    Game[Game["paper"] = 0] = "paper";
    Game[Game["arena"] = 1] = "arena";
    Game[Game["mtgo"] = 2] = "mtgo";
})(Game || (Game = {}));
var Legality;
(function (Legality) {
    Legality[Legality["legal"] = 0] = "legal";
    Legality[Legality["not_legal"] = 1] = "not_legal";
    Legality[Legality["restricted"] = 2] = "restricted";
    Legality[Legality["banned"] = 3] = "banned";
})(Legality || (Legality = {}));
var Border;
(function (Border) {
    Border[Border["black"] = 0] = "black";
    Border[Border["borderless"] = 1] = "borderless";
    Border[Border["gold"] = 2] = "gold";
    Border[Border["silver"] = 3] = "silver";
    Border[Border["white"] = 4] = "white";
})(Border || (Border = {}));
var Layout;
(function (Layout) {
    Layout[Layout["normal"] = 0] = "normal";
    Layout[Layout["split"] = 1] = "split";
    Layout[Layout["flip"] = 2] = "flip";
    Layout[Layout["transform"] = 3] = "transform";
    Layout[Layout["meld"] = 4] = "meld";
    Layout[Layout["leveler"] = 5] = "leveler";
    Layout[Layout["saga"] = 6] = "saga";
    Layout[Layout["planar"] = 7] = "planar";
    Layout[Layout["scheme"] = 8] = "scheme";
    Layout[Layout["vanguard"] = 9] = "vanguard";
    Layout[Layout["token"] = 10] = "token";
    Layout[Layout["double_faced_token"] = 11] = "double_faced_token";
    Layout[Layout["emblem"] = 12] = "emblem";
    Layout[Layout["augment"] = 13] = "augment";
    Layout[Layout["host"] = 14] = "host";
})(Layout || (Layout = {}));
var Format;
(function (Format) {
    Format[Format["standard"] = 0] = "standard";
    Format[Format["future"] = 1] = "future";
    Format[Format["frontier"] = 2] = "frontier";
    Format[Format["modern"] = 3] = "modern";
    Format[Format["legacy"] = 4] = "legacy";
    Format[Format["pauper"] = 5] = "pauper";
    Format[Format["vintage"] = 6] = "vintage";
    Format[Format["penny"] = 7] = "penny";
    Format[Format["commander"] = 8] = "commander";
    Format[Format["1v1"] = 9] = "1v1";
    Format[Format["duel"] = 10] = "duel";
    Format[Format["brawl"] = 11] = "brawl";
})(Format || (Format = {}));
var CardIdentifier;
(function (CardIdentifier) {
    function byId(id) {
        return { id };
    }
    CardIdentifier.byId = byId;
    function byMtgoId(id) {
        return { mtgo_id: id };
    }
    CardIdentifier.byMtgoId = byMtgoId;
    function byMultiverseId(id) {
        return { multiverse_id: id };
    }
    CardIdentifier.byMultiverseId = byMultiverseId;
    function byName(name, set) {
        return { name, set };
    }
    CardIdentifier.byName = byName;
    function bySet(set, collectorNumber) {
        return { collector_number: `${collectorNumber}`, set };
    }
    CardIdentifier.bySet = bySet;
})(CardIdentifier = exports.CardIdentifier || (exports.CardIdentifier = {}));
exports.default = new class Cards extends MagicQuerier_1.default {
    byName(name, set, fuzzy = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof set === "boolean") {
                fuzzy = set;
                set = undefined;
            }
            return this.query("cards/named", {
                [fuzzy ? "fuzzy" : "exact"]: name,
                set,
            });
        });
    }
    byId(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["cards", id]);
        });
    }
    bySet(setCode, collectorNumber, lang) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["cards", setCode, collectorNumber, lang]);
        });
    }
    byMultiverseId(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["cards/multiverse", id]);
        });
    }
    byMtgoId(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["cards/mtgo", id]);
        });
    }
    byArenaId(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["cards/arena", id]);
        });
    }
    byTcgPlayerId(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["cards/tcgplayer", id]);
        });
    }
    random() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query("cards/random");
        });
    }
    search(query, options) {
        const emitter = new MagicEmitter_1.default();
        this.queryPage(emitter, "cards/search", Object.assign({ q: query }, options))
            .catch(err => emitter.emit("error", err));
        return emitter;
    }
    all(page = 1) {
        const emitter = new MagicEmitter_1.default();
        this.queryPage(emitter, "cards", {}, page)
            .catch(err => emitter.emit("error", err));
        return emitter;
    }
    autoCompleteName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("cards/autocomplete", { q: name })).data;
        });
    }
    collection(...identifiers) {
        const emitter = new MagicEmitter_1.default();
        this.processCollection(emitter, identifiers);
        return emitter;
    }
    processCollection(emitter, identifiers) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < identifiers.length; i += 75) {
                if (emitter.cancelled)
                    break;
                const collectionSection = { identifiers: identifiers.slice(i, i + 75) };
                const data = (yield this.query("cards/collection", undefined, collectionSection)).data;
                for (const card of data) {
                    emitter.emit("data", card);
                    if (emitter.cancelled)
                        break;
                }
                if (emitter.willCancelAfterPage)
                    emitter.cancel();
            }
            if (!emitter.cancelled)
                emitter.emit("end");
            emitter.emit("done");
        });
    }
};
