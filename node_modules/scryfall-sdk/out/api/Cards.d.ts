import { Color } from "../IScry";
import MagicEmitter from "../util/MagicEmitter";
declare enum UniqueStrategy {
    cards = 0,
    art = 1,
    prints = 2
}
declare enum Sort {
    name = 0,
    set = 1,
    released = 2,
    rarity = 3,
    color = 4,
    usd = 5,
    tix = 6,
    eur = 7,
    cmc = 8,
    power = 9,
    toughness = 10,
    edhrec = 11,
    artist = 12
}
declare enum SortDirection {
    auto = 0,
    asc = 1,
    desc = 2
}
export interface SearchOptions {
    unique?: keyof typeof UniqueStrategy;
    order?: keyof typeof Sort;
    dir?: keyof typeof SortDirection;
    include_extras?: boolean;
    include_multilingual?: boolean;
    page?: number;
}
declare enum Rarity {
    common = 0,
    uncommon = 1,
    rare = 2,
    mythic = 3
}
declare enum FrameEffect {
    legendary = 0,
    miracle = 1,
    nyxtouched = 2,
    draft = 3,
    devoid = 4,
    tombstone = 5,
    colorshifted = 6,
    sunmoondfc = 7,
    compasslanddfc = 8,
    originpwdfc = 9,
    mooneldrazidfc = 10
}
declare enum Game {
    paper = 0,
    arena = 1,
    mtgo = 2
}
declare enum Legality {
    legal = 0,
    not_legal = 1,
    restricted = 2,
    banned = 3
}
declare enum Border {
    black = 0,
    borderless = 1,
    gold = 2,
    silver = 3,
    white = 4
}
declare enum Layout {
    normal = 0,
    split = 1,
    flip = 2,
    transform = 3,
    meld = 4,
    leveler = 5,
    saga = 6,
    planar = 7,
    scheme = 8,
    vanguard = 9,
    token = 10,
    double_faced_token = 11,
    emblem = 12,
    augment = 13,
    host = 14
}
declare enum Format {
    standard = 0,
    future = 1,
    frontier = 2,
    modern = 3,
    legacy = 4,
    pauper = 5,
    vintage = 6,
    penny = 7,
    commander = 8,
    "1v1" = 9,
    duel = 10,
    brawl = 11
}
export declare type Legalities = {
    [key in keyof typeof Format]: keyof typeof Legality;
};
export interface ImageUris {
    small: string;
    normal: string;
    large: string;
    png: string;
    art_crop: string;
    border_crop: string;
}
export interface Prices {
    usd: string | null;
    usd_foil: string | null;
    eur: string | null;
    tix: string | null;
}
export interface PurchaseUris {
    amazon?: string;
    ebay?: string;
    tcgplayer?: string;
    magiccardmarket?: string;
    cardhoarder?: string;
    card_kingdom?: string;
    mtgo_traders?: string;
    coolstuffinc?: string;
    [key: string]: string | undefined;
}
export interface RelatedUris {
    gatherer?: string;
    tcgplayer_decks?: string;
    edhrec?: string;
    mtgtop8?: string;
    [key: string]: string | undefined;
}
export interface CardPart {
    id: string;
    name: string;
    uri: string;
}
export interface CardFace {
    object: "card_face";
    artist?: string | null;
    color_indicator?: Color[] | null;
    colors: Color[];
    flavor_text?: string | null;
    illustration_id?: string | null;
    image_uris?: ImageUris | null;
    loyalty?: string | null;
    mana_cost: string;
    name: string;
    oracle_text?: string | null;
    power?: string | null;
    printed_name?: string | null;
    printed_text?: string | null;
    printed_type_line?: string | null;
    toughness?: string | null;
    type_line: string;
    watermark?: string | null;
}
export interface Card {
    object: "card";
    arena_id?: number;
    id: string;
    lang: string;
    mtgo_id?: number | null;
    mtgo_foil_id?: number | null;
    multiverse_ids?: number[] | null;
    tcgplayer_id?: number | null;
    oracle_id: string;
    prints_search_uri: string;
    rulings_uri: string;
    scryfall_uri: string;
    uri: string;
    all_parts?: CardPart[] | null;
    card_faces?: CardFace[] | null;
    cmc: number;
    colors: Color[];
    color_identity: Color[];
    color_indicator?: Color[] | null;
    edhrec_rank?: number | null;
    foil: boolean;
    hand_modifier?: string | null;
    layout: keyof typeof Layout;
    legalities: Legalities;
    life_modifier?: string | null;
    loyalty?: string | null;
    mana_cost?: string;
    name: string;
    nonfoil: boolean;
    oracle_text?: string | null;
    oversized: boolean;
    power?: string | null;
    reserved: boolean;
    toughness?: string | null;
    type_line?: string | null;
    artist?: string | null;
    border_color: keyof typeof Border;
    collector_number: string;
    digital: boolean;
    flavor_text?: string | null;
    frame_effect: keyof typeof FrameEffect;
    frame: 1993 | 1997 | 2003 | 2015 | "Future";
    full_art: boolean;
    games: (keyof typeof Game)[];
    highres_image: boolean;
    illustration_id?: string | null;
    image_uris?: ImageUris | null;
    prices: Prices;
    printed_name?: string | null;
    printed_text?: string | null;
    printed_type_line?: string | null;
    promo: boolean;
    purchase_uris: PurchaseUris;
    rarity: keyof typeof Rarity;
    related_uris: RelatedUris;
    released_at: string;
    reprint: boolean;
    scryfall_set_uri: string;
    set_name: string;
    set_search_uri: string;
    set_uri: string;
    set: string;
    story_spotlight: boolean;
    watermark?: string | null;
}
export interface CardIdentifier {
    id?: string;
    mtgo_id?: number;
    multiverse_id?: number;
    name?: string;
    set?: string;
    collector_number?: string;
}
export declare module CardIdentifier {
    function byId(id: string): CardIdentifier;
    function byMtgoId(id: number): CardIdentifier;
    function byMultiverseId(id: number): CardIdentifier;
    function byName(name: string, set?: string): CardIdentifier;
    function bySet(set: string, collectorNumber: string | number): CardIdentifier;
}
declare const _default: {
    byName(name: string, fuzzy?: boolean): Promise<Card>;
    byName(name: string, set?: string, fuzzy?: boolean): Promise<Card>;
    byId(id: string): Promise<Card>;
    bySet(setCode: string, collectorNumber: number, lang?: string): Promise<Card>;
    byMultiverseId(id: number): Promise<Card>;
    byMtgoId(id: number): Promise<Card>;
    byArenaId(id: number): Promise<Card>;
    byTcgPlayerId(id: number): Promise<Card>;
    random(): Promise<Card>;
    search(query: string, options?: SearchOptions): MagicEmitter<Card>;
    all(page?: number): MagicEmitter<Card>;
    autoCompleteName(name: string): Promise<string[]>;
    collection(...identifiers: CardIdentifier[]): MagicEmitter<Card>;
    processCollection(emitter: MagicEmitter<Card>, identifiers: CardIdentifier[]): Promise<void>;
    query<T>(apiPath: string | number | (string | number)[], query?: {
        [key: string]: any;
    }, post?: any): Promise<T>;
    queryPage<T>(emitter: MagicEmitter<T>, apiPath: string, query: any, page?: number): Promise<void>;
    tryQuery(apiPath: string, query?: {
        [key: string]: any;
    }, post?: any): Promise<{
        result: import("axios").AxiosResponse<any>;
        lastError: import("../util/MagicQuerier").SearchError;
    }>;
    canRetry(error: import("../util/MagicQuerier").SearchError): boolean;
};
export default _default;
