"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const MagicQuerier_1 = require("../util/MagicQuerier");
exports.default = new class Catalog extends MagicQuerier_1.default {
    cardNames() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/card-names")).data;
        });
    }
    artistNames() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/artist-names")).data;
        });
    }
    wordBank() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/word-bank")).data;
        });
    }
    creatureTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/creature-types")).data;
        });
    }
    planeswalkerTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/planeswalker-types")).data;
        });
    }
    landTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/land-types")).data;
        });
    }
    artifactTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/artifact-types")).data;
        });
    }
    enchantmentTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/enchantment-types")).data;
        });
    }
    spellTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/spell-types")).data;
        });
    }
    powers() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/powers")).data;
        });
    }
    toughnesses() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/toughnesses")).data;
        });
    }
    loyalties() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/loyalties")).data;
        });
    }
    watermarks() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("catalog/watermarks")).data;
        });
    }
};
