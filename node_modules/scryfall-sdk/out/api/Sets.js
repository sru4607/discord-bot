"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const MagicQuerier_1 = require("../util/MagicQuerier");
var SetType;
(function (SetType) {
    SetType[SetType["core"] = 0] = "core";
    SetType[SetType["expansion"] = 1] = "expansion";
    SetType[SetType["masters"] = 2] = "masters";
    SetType[SetType["masterpiece"] = 3] = "masterpiece";
    SetType[SetType["from_the_vault"] = 4] = "from_the_vault";
    SetType[SetType["spellbook"] = 5] = "spellbook";
    SetType[SetType["premium_deck"] = 6] = "premium_deck";
    SetType[SetType["duel_deck"] = 7] = "duel_deck";
    SetType[SetType["draft_innovation"] = 8] = "draft_innovation";
    SetType[SetType["treasure_chest"] = 9] = "treasure_chest";
    SetType[SetType["commander"] = 10] = "commander";
    SetType[SetType["planechase"] = 11] = "planechase";
    SetType[SetType["archenemy"] = 12] = "archenemy";
    SetType[SetType["vanguard"] = 13] = "vanguard";
    SetType[SetType["funny"] = 14] = "funny";
    SetType[SetType["starter"] = 15] = "starter";
    SetType[SetType["box"] = 16] = "box";
    SetType[SetType["promo"] = 17] = "promo";
    SetType[SetType["token"] = 18] = "token";
    SetType[SetType["memorabilia"] = 19] = "memorabilia";
})(SetType || (SetType = {}));
exports.default = new class Sets extends MagicQuerier_1.default {
    all() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query("sets")).data;
        });
    }
    byCode(code) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["sets", code]);
        });
    }
    byId(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["sets", id]);
        });
    }
    byTcgPlayerId(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["sets/tcgplayer", id]);
        });
    }
};
